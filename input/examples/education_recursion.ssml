<?xml version="1.0" encoding="UTF-8"?>
<speak version="1.0" xmlns="http://www.w3.org/2001/10/synthesis" 
       xmlns:mstts="https://www.w3.org/2001/mstts" xml:lang="en-US">
    <voice name="en-US-GuyNeural">
        <!-- Introduction -->
        <p>
            <prosody rate="0.85" pitch="-2%">
                Hello students! <break time="600ms" />
                Today, we're going to explore one of the most fascinating concepts in computer science: 
                <emphasis level="moderate">recursion</emphasis>.
            </prosody>
        </p>
        
        <break time="1000ms" />
        
        <!-- Definition -->
        <p>
            <prosody rate="0.82" pitch="-1%">
                So, what <emphasis level="moderate">is</emphasis> recursion?
                <break time="600ms" />
                Simply put, <break time="200ms" /> recursion is when a function calls <emphasis level="moderate">itself</emphasis> 
                to solve a problem by breaking it down into smaller, similar sub-problems.
                <break time="800ms" />
                Think of it like looking into two mirrors facing each other.
                <break time="500ms" />
                You see reflections within reflections, <break time="300ms" /> going on and on.
            </prosody>
        </p>
        
        <break time="1000ms" />
        
        <!-- Example Introduction -->
        <p>
            <prosody rate="0.85" pitch="-1%">
                Let's look at a <emphasis level="moderate">classic example</emphasis>: 
                calculating factorial.
            </prosody>
        </p>
        
        <break time="800ms" />
        
        <!-- Mathematical Explanation -->
        <p>
            <prosody rate="0.80" pitch="-2%">
                Remember, <break time="200ms" /> the factorial of 
                <say-as interpret-as="cardinal">5</say-as>, 
                <break time="300ms" />
                written as five factorial,
                <break time="400ms" />
                equals 
                <say-as interpret-as="cardinal">5</say-as> 
                times 
                <say-as interpret-as="cardinal">4</say-as> 
                times 
                <say-as interpret-as="cardinal">3</say-as> 
                times 
                <say-as interpret-as="cardinal">2</say-as> 
                times 
                <say-as interpret-as="cardinal">1</say-as>.
                <break time="800ms" />
                That gives us 
                <say-as interpret-as="cardinal">120</say-as>.
            </prosody>
        </p>
        
        <break time="1000ms" />
        
        <!-- Recursive Thinking -->
        <p>
            <prosody rate="0.82" pitch="-1%">
                But here's the <emphasis level="strong">recursive</emphasis> way to think about it:
                <break time="700ms" />
                The factorial of 
                <say-as interpret-as="cardinal">5</say-as> 
                <break time="200ms" />
                is simply 
                <say-as interpret-as="cardinal">5</say-as> 
                <emphasis level="moderate">multiplied by</emphasis> 
                <break time="200ms" />
                the factorial of 
                <say-as interpret-as="cardinal">4</say-as>.
                <break time="800ms" />
                And the factorial of 
                <say-as interpret-as="cardinal">4</say-as> 
                <break time="200ms" />
                is 
                <say-as interpret-as="cardinal">4</say-as> 
                times the factorial of 
                <say-as interpret-as="cardinal">3</say-as>.
                <break time="700ms" />
                This pattern continues <break time="200ms" /> until we reach our 
                <emphasis level="strong">base case</emphasis>, 
                <break time="300ms" />
                which is the factorial of 
                <say-as interpret-as="cardinal">1</say-as>, 
                <break time="200ms" />
                equaling simply 
                <say-as interpret-as="cardinal">1</say-as>.
            </prosody>
        </p>
        
        <break time="1200ms" />
        
        <!-- Key Concept -->
        <p>
            <prosody rate="0.83" pitch="-2%">
                This is the <emphasis level="strong">key</emphasis> to recursion:
                <break time="600ms" />
                Every recursive function <emphasis level="moderate">must have</emphasis> 
                a base case.
                <break time="700ms" />
                Without it, <break time="200ms" /> the function would call itself forever, 
                <break time="300ms" />
                creating what we call an 
                <emphasis level="strong">infinite loop</emphasis>.
                <break time="500ms" />
                And trust me, <break time="300ms" /> that's <emphasis level="moderate">not</emphasis> what we want!
            </prosody>
        </p>
        
        <break time="1100ms" />
        
        <!-- Practical Application -->
        <p>
            <prosody rate="0.84" pitch="-1%">
                Recursion is incredibly powerful and elegant.
                <break time="600ms" />
                It's used in many real-world applications: 
                <break time="500ms" />
                searching through file systems, 
                <break time="400ms" />
                processing tree structures, 
                <break time="400ms" />
                and even in algorithms that power search engines.
            </prosody>
        </p>
        
        <break time="1000ms" />
        
        <!-- Conclusion -->
        <p>
            <prosody rate="0.83" pitch="-2%">
                So remember: <break time="500ms" />
                recursion is a function calling itself, 
                <break time="500ms" />
                always with a base case to stop the recursion.
                <break time="700ms" />
                Master this concept, <break time="200ms" /> and you'll unlock a powerful tool 
                in your programming toolkit!
            </prosody>
        </p>
        
        <break time="800ms" />
        
        <!-- Closing -->
        <p>
            <prosody rate="0.85" pitch="-1%">
                Thanks for learning with me today! <break time="500ms" />
                Keep practicing, <break time="200ms" /> and happy coding!
            </prosody>
        </p>
    </voice>
</speak>
